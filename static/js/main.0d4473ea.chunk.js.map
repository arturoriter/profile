{"version":3,"sources":["components/Title.tsx","components/Certifications.tsx","components/Education.tsx","components/BootstrapIcon.tsx","components/Footer.tsx","components/Contacts.tsx","data/DarkTheme.ts","data/LightTheme.ts","ThemeManager/index.tsx","components/ThemeButton.tsx","components/Header.tsx","components/Languages.tsx","components/LinkedinBadge.tsx","components/Skills.tsx","components/Summary.tsx","components/WorkExperience.tsx","App.tsx","serviceWorker.ts","utils/getMessages.ts","index.tsx"],"names":["StyledH1","styled","h1","props","theme","textColor","backgroundColor","fontFamily","Title","name","id","Certifications","data","map","certification","index","key","institution","RegularMarginBottom","div","Education","education","course","degree","startDate","endDate","thesisTopic","StyledSpan","span","BootstrapIcon","className","StyledFooter","footer","StyledLink","a","DevelopedBy","Footer","Container","Row","Col","href","target","rel","StyledDiv","header","Contacts","contact","icon","link","display","DarkTheme","page","button","linkedinBadge","table","LightTheme","defaultMode","ManageThemeContext","React","createContext","mode","toggle","useTheme","useContext","ThemeManager","children","useState","themeState","setThemeState","Provider","value","ThemeButton","onClick","Name","Headline","StyledHeader","Header","fluid","xs","sm","md","lg","xl","style","alignSelf","lineHeight","headline","contacts","StyledTable","Table","Languages","language","proficiency","LinkedinBadge","profileName","data-version","data-size","data-locale","data-type","data-vanity","e","Skills","skill","description","Summary","SmallMarginBottom","JobTitle","ColumnTextAlign","jobTitle","companyLink","companyName","location","duration","padding","marginRight","Description","companyInfo","experienceIndex","margin","TechStack","WorkExperience","experience","company","info","teckStack","App","isLoading","setIsLoading","useEffect","Promise","resolve","setTimeout","then","profile","summary","skills","workExperience","certifications","languages","linkedinProfileName","Boolean","window","hostname","match","messages","en","acceptLanguage","locale","Object","assign","getMessages","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d4473ea.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport styled from 'styled-components';\n\nconst StyledH1 = styled.h1`\n  color: ${props => props.theme.h1.textColor};\n  background-color: ${props => props.theme.h1.backgroundColor};\n  font-family: ${props => props.theme.h1.fontFamily};\n  font-size: 1.1em;\n  text-transform: uppercase;\n  text-align: center;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin-top: 0.5em;\n  margin-bottom: 1em;\n`;\n\ninterface TitleType {\n  name: string;\n}\n\nconst Title = ({ name }: TitleType) => {\n  return (\n    <>\n      <StyledH1>\n        <FormattedMessage id={name} />\n      </StyledH1>\n    </>\n  );\n};\n\nexport default Title;\n","import React from 'react';\n\nimport Title from './Title';\n\ninterface CertificationType {\n  name: string;\n  institution: string;\n}\n\ninterface CertificationListType {\n  data: Array<CertificationType>;\n}\n\nconst Certifications = ({ data }: CertificationListType) => {\n  return (\n    <div id=\"certifications\">\n      <Title name=\"CERTIFICATION.TITLE\" />\n      <ul>\n        {data.map((certification, index) => (\n          <li\n            key={`certification-${index}`}\n          >{`${certification.name}. ${certification.institution}`}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Certifications;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Title from './Title';\n\nconst RegularMarginBottom = styled.div`\n  margin-bottom: 1em;\n`;\n\ninterface EducationType {\n  course: string;\n  institution: string;\n  degree: string;\n  startDate: number;\n  endDate?: number;\n  thesisTopic?: string;\n}\n\ninterface EducationListType {\n  data: Array<EducationType>;\n}\n\nconst Education = ({ data }: EducationListType) => {\n  return (\n    <div id=\"education\">\n      <Title name=\"EDUCATION.TITLE\" />\n      {data.map((education, index) => (\n        <RegularMarginBottom key={`education-${index}`}>\n          {`${education.course}; \n          ${education.institution}, \n          ${education.degree}. \n          ${education.startDate} - ${education.endDate || ''} \\n\n          ${education.thesisTopic || ''}`}\n        </RegularMarginBottom>\n      ))}\n    </div>\n  );\n};\n\nexport default Education;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpan = styled.span`\n  padding-right: 0.2em;\n  padding-left: 0.2em;\n`;\n\ninterface IconType {\n  name: string;\n}\n\nconst BootstrapIcon = ({ name }: IconType) => {\n  return <StyledSpan className={`fa fa-${name}`} />;\n};\n\nexport default BootstrapIcon;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { FormattedMessage } from 'react-intl';\nimport styled from 'styled-components';\n\nimport BootstrapIcon from './BootstrapIcon';\n\nconst StyledFooter = styled.footer`\n  color: ${props => props.theme.footer.textColor};\n  background-color: ${props => props.theme.footer.backgroundColor};\n  text-align: center;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n`;\n\nconst StyledLink = styled.a`\n  font-size: 2em;\n  color: ${props => props.theme.footer.textColor};\n`;\n\nconst DevelopedBy = styled.span`\n  font-size: 0.8em;\n\n  @media (max-width: 575px) {\n    font-size: 0.6em;\n  }\n`;\n\nconst Footer = () => {\n  return (\n    <StyledFooter id=\"footer\">\n      <Container>\n        <Row>\n          <Col>\n            <DevelopedBy>\n              <FormattedMessage id=\"FOOTER.DEVELOPED_BY\" />\n            </DevelopedBy>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <StyledLink\n              href=\"https://linkedin.com/in/arturoriter\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <BootstrapIcon name=\"linkedin-square\" />\n            </StyledLink>\n            <StyledLink\n              href=\"https://github.com/arturoriter\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <BootstrapIcon name=\"github-square\" />\n            </StyledLink>\n            <StyledLink\n              href=\"mailto:arturo.riter@gmail.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <BootstrapIcon name=\"envelope\" />\n            </StyledLink>\n          </Col>\n        </Row>\n      </Container>\n    </StyledFooter>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport BootstrapIcon from './BootstrapIcon';\n\nconst StyledDiv = styled.div`\n  font-size: 0.8em;\n  text-align: center;\n`;\n\nconst StyledLink = styled.a`\n  color: ${props => props.theme.header.textColor};\n  font-weight: bold;\n\n  :hover,\n  :visited,\n  :link,\n  :active {\n    color: ${props => props.theme.header.textColor};\n  }\n`;\n\nexport interface ContactType {\n  icon: string;\n  link: string;\n  display: string;\n}\n\nexport interface ContactListType {\n  data: Array<ContactType>;\n}\n\nconst Contacts = ({ data }: ContactListType) => {\n  return (\n    <StyledDiv id=\"contacts\">\n      {data.map((contact, index) => (\n        <div key={`contact-${index}`}>\n          <BootstrapIcon name={contact.icon} />\n          <StyledLink\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={contact.link}\n          >\n            {contact.display}\n          </StyledLink>\n        </div>\n      ))}\n    </StyledDiv>\n  );\n};\n\nexport default Contacts;\n","import { Theme } from './Theme';\n\nexport const DarkTheme: Theme = {\n  page: {\n    textColor: '#dae0e5',\n    backgroundColor: '#161616',\n  },\n  h1: {\n    backgroundColor: '#222',\n    textColor: '#dae0e5',\n  },\n  header: {\n    backgroundColor: '#222',\n    textColor: '#dae0e5',\n  },\n  footer: {\n    backgroundColor: '#303336',\n    textColor: '#f6f6f6',\n  },\n  button: {\n    backgroundColor: '#silver',\n    textColor: '#f6f6f6',\n  },\n  linkedinBadge: 'LI-profile-badge LI-badge-container-horizontal-dark dark',\n  table: '.table-dark',\n};\n","import { Theme } from './Theme';\n\nexport const LightTheme: Theme = {\n  page: {\n    textColor: '#000',\n    backgroundColor: '#fff',\n  },\n  h1: {\n    backgroundColor: '#b1d6dc',\n    textColor: '#000',\n  },\n  header: {\n    backgroundColor: '#b1d6dc',\n    textColor: '#000',\n  },\n  footer: {\n    backgroundColor: '#303336',\n    textColor: '#fff',\n  },\n  button: {\n    backgroundColor: '#silver',\n    textColor: '#000',\n  },\n  linkedinBadge: 'LI-profile-badge LI-badge-container-horizontal-light light',\n  table: 'table-hover',\n};\n","import React from 'react';\n\nimport { DarkTheme } from '../data/DarkTheme';\nimport { LightTheme } from '../data/LightTheme';\nimport { ThemeContext } from '../types/ThemeContext';\n\nconst defaultMode = LightTheme;\n\nexport const ManageThemeContext: React.Context<ThemeContext> = React.createContext(\n  {\n    mode: defaultMode,\n    toggle: () => {},\n  }\n);\n\nexport const useTheme = () => React.useContext(ManageThemeContext);\n\nexport const ThemeManager: React.FC = ({ children }) => {\n  const [themeState, setThemeState] = React.useState({\n    mode: defaultMode,\n  });\n\n  const toggle = () => {\n    setThemeState({\n      mode: themeState.mode === LightTheme ? DarkTheme : LightTheme,\n    });\n  };\n\n  return (\n    <ManageThemeContext.Provider\n      value={{\n        mode: themeState.mode,\n        toggle: toggle,\n      }}\n    >\n      {children}\n    </ManageThemeContext.Provider>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { DarkTheme } from '../data/DarkTheme';\nimport { useTheme } from '../ThemeManager';\n\nconst StyledLink = styled.a`\n  color: ${props => props.theme.button.textColor};\n  background-color: ${props => props.theme.button.backgroundColor};\n  border-radius: 0.3em;\n  font-size: 0.7em;\n  padding: 0.2em 0.5em;\n  border-top: 1px solid #cccccc;\n  border-right: 1px solid #333333;\n  border-bottom: 1px solid #333333;\n  border-left: 1px solid #cccccc;\n\n  :hover,\n  :visited,\n  :link,\n  :active {\n    color: ${props => props.theme.button.textColor};\n    text-decoration: none;\n  }\n`;\n\nconst ThemeButton = () => {\n  const theme = useTheme();\n\n  return (\n    <StyledLink id=\"themeBtn\" href=\"#\" onClick={() => theme.toggle()}>\n      {theme.mode === DarkTheme ? (\n        <FormattedMessage id=\"THEME.LIGHT_MODE\" />\n      ) : (\n        <FormattedMessage id=\"THEME.DARK_MODE\" />\n      )}\n    </StyledLink>\n  );\n};\n\nexport default ThemeButton;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nimport Contacts, { ContactType } from './Contacts';\nimport ThemeButton from './ThemeButton';\n\nconst Name = styled.div`\n  font-size: 3em;\n  text-transform: uppercase;\n\n  @media (max-width: 575px) {\n    font-size: 2.2em;\n  }\n`;\n\nconst Headline = styled.div`\n  text-transform: uppercase;\n  line-height: 1.5em;\n\n  @media (max-width: 575px) {\n    margin-bottom: 1em;\n  }\n`;\n\nconst StyledHeader = styled.header`\n  text-align: center;\n  color: ${props => props.theme.header.textColor};\n  background-color: ${props => props.theme.header.backgroundColor};\n  padding-top: 1em;\n  padding-bottom: 1em;\n  margin-bottom: 1em;\n`;\n\ninterface HeaderType {\n  name: string;\n  headline: string;\n  contacts: Array<ContactType>;\n}\n\ninterface HeaderListType {\n  data: HeaderType;\n}\n\nconst Header = ({ data }: HeaderListType) => {\n  return (\n    <StyledHeader id=\"header\">\n      <Container fluid>\n        <Row className=\"justify-content-md-center\">\n          <Col\n            xs=\"12\"\n            sm=\"8\"\n            md=\"6\"\n            lg=\"5\"\n            xl=\"5\"\n            style={{ alignSelf: 'center', lineHeight: '1' }}\n          >\n            <Name>{data.name}</Name>\n            <Headline>{data.headline}</Headline>\n          </Col>\n          <Col\n            xs=\"12\"\n            sm=\"4\"\n            md=\"3\"\n            lg=\"3\"\n            xl=\"2\"\n            style={{ alignSelf: 'center' }}\n          >\n            <Contacts data={data.contacts} />\n            <ThemeButton />\n          </Col>\n        </Row>\n      </Container>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { FormattedMessage } from 'react-intl';\nimport styled from 'styled-components';\n\nimport Title from './Title';\nimport { useTheme } from '../ThemeManager';\n\nconst StyledDiv = styled.div`\n  margin-bottom: 1.5em;\n`;\n\nconst StyledTable = styled(Table)`\n  line-height: 0.7;\n  color: ${props => props.theme.page.textColor};\n`;\n\ninterface LanguageType {\n  name: string;\n  proficiency: string;\n}\ninterface LanguageListType {\n  data: Array<LanguageType>;\n}\n\nconst Languages = ({ data }: LanguageListType) => {\n  const theme = useTheme();\n\n  return (\n    <StyledDiv id=\"languages\">\n      <Title name=\"LANGUAGE.TITLE\" />\n      <StyledTable className={theme.mode.table}>\n        <thead>\n          <tr>\n            <th>\n              <FormattedMessage id=\"LANGUAGE.NAME\" />\n            </th>\n            <th>\n              <FormattedMessage id=\"LANGUAGE.LEVEL\" />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((language, index) => (\n            <tr key={`language-${index}`}>\n              <td>{language.name}</td>\n              <td>{language.proficiency}</td>\n            </tr>\n          ))}\n        </tbody>\n      </StyledTable>\n    </StyledDiv>\n  );\n};\n\nexport default Languages;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { useTheme } from '../ThemeManager';\n\nconst StyledDiv = styled.div`\n  margin-top: 1em;\n  margin-bottom: 1.5em;\n`;\n\ninterface LinkedinBadgeType {\n  profileName: string;\n}\n\nconst LinkedinBadge = ({ profileName }: LinkedinBadgeType) => {\n  const theme = useTheme();\n\n  try {\n    return (\n      <StyledDiv\n        className={theme.mode.linkedinBadge}\n        data-version=\"v1\"\n        data-size=\"small\"\n        data-locale=\"en_US\"\n        data-type=\"horizontal\"\n        data-vanity=\"arturoriter\"\n      />\n    );\n  } catch (e) {\n    return null;\n  }\n};\n\nexport default LinkedinBadge;\n","import React from 'react';\n\nimport Title from './Title';\n\ninterface SkillType {\n  name: string;\n  description: string;\n}\n\ninterface SkillListType {\n  data: Array<SkillType>;\n}\n\nconst Skills = ({ data }: SkillListType) => {\n  return (\n    <div id=\"skills\">\n      <Title name=\"SKILLS.TITLE\" />\n      <ul>\n        {data.map((skill, index) => (\n          <li\n            key={`skill-${index}`}\n          >{`${skill.name}: ${skill.description}`}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Skills;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledDiv = styled.div`\n  margin-bottom: 1em;\n`;\n\ninterface SummaryType {\n  data: string;\n}\n\nconst Summary = ({ data }: SummaryType) => {\n  return <StyledDiv id=\"summary\">{data}</StyledDiv>;\n};\n\nexport default Summary;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { FormattedMessage } from 'react-intl';\nimport styled from 'styled-components';\n\nimport Title from './Title';\nimport BootstrapIcon from './BootstrapIcon';\n\nconst SmallMarginBottom = styled.div`\n  margin-bottom: 0.5em;\n`;\n\nconst RegularMarginBottom = styled.div`\n  margin-bottom: 1em;\n`;\n\nconst StyledLink = styled.a`\n  color: ${props => props.theme.page.textColor};\n  font-weight: bold;\n\n  :hover,\n  :visited,\n  :link,\n  :active {\n    color: ${props => props.theme.page.textColor};\n  }\n`;\n\nconst JobTitle = styled.div`\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nconst ColumnTextAlign = styled.div`\n  text-align: right;\n\n  @media (max-width: 767px) {\n    text-align: left;\n  }\n`;\n\ninterface HeaderType {\n  jobTitle: string;\n  companyLink: string;\n  companyName: string;\n  location: string;\n  duration: string;\n}\n\ninterface DescriptionType {\n  experienceIndex: number;\n  companyInfo: string;\n  description: Array<string>;\n}\n\ninterface TechStackType {\n  description: string;\n}\n\ninterface WorkExperienceType {\n  jobTitle: string;\n  company: {\n    name: string;\n    link: string;\n    location: string;\n    info: string;\n  };\n  startDate: string;\n  endDate: string;\n  description: Array<string>;\n  teckStack: string;\n}\n\ninterface WorkExperienceListType {\n  data: Array<WorkExperienceType>;\n}\nconst Header = (props: HeaderType) => {\n  const { jobTitle, companyLink, companyName, location, duration } = {\n    ...props,\n  };\n  return (\n    <>\n      <JobTitle>{jobTitle}</JobTitle>\n      <Container fluid style={{ padding: '0' }}>\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\" xl=\"5\">\n            <StyledLink\n              href={companyLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {companyName}\n            </StyledLink>\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"7\" lg=\"7\" xl=\"7\">\n            <ColumnTextAlign>\n              <BootstrapIcon name=\"globe\" />\n              <span style={{ marginRight: '1em' }}>{location}</span>\n              <BootstrapIcon name=\"calendar\" />\n              {duration}\n            </ColumnTextAlign>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nconst Description = (props: DescriptionType) => {\n  const { companyInfo, description, experienceIndex } = { ...props };\n  return (\n    <SmallMarginBottom>\n      {companyInfo}\n      <ul style={{ margin: 0 }}>\n        {description.map((value, index) => (\n          <li key={`desc-${experienceIndex}.${index}`}>{value} </li>\n        ))}\n      </ul>\n    </SmallMarginBottom>\n  );\n};\n\nconst TechStack = (props: TechStackType) => {\n  const { description } = { ...props };\n  return (\n    <RegularMarginBottom className=\"font-italic\">\n      <FormattedMessage id=\"WORK_EXPERIENCE.TECH_STACK\" />\n      {`: ${description}`}\n    </RegularMarginBottom>\n  );\n};\n\nconst WorkExperience = ({ data }: WorkExperienceListType) => {\n  return (\n    <div id=\"experiences\">\n      <Title name=\"WORK_EXPERIENCE.TITLE\" />\n\n      {data.map((experience, index) => (\n        <div key={`experience-${index}`}>\n          <Header\n            jobTitle={experience.jobTitle}\n            companyName={experience.company.name}\n            companyLink={experience.company.link}\n            location={experience.company.location}\n            duration={`${experience.startDate} - ${experience.endDate}`}\n          />\n          <Description\n            experienceIndex={index}\n            companyInfo={experience.company.info}\n            description={experience.description}\n          />\n          <TechStack description={experience.teckStack} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default WorkExperience;\n","import React, { useEffect, useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport styled, { ThemeProvider } from 'styled-components';\n\nimport Certifications from './components/Certifications';\nimport Education from './components/Education';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Languages from './components/Languages';\nimport LinkedinBadge from './components/LinkedinBadge';\nimport Skills from './components/Skills';\nimport Summary from './components/Summary';\nimport WorkExperience from './components/WorkExperience';\n\nimport { useTheme } from './ThemeManager';\n\nimport profile from './data/profile.json';\n\nconst StyledDiv = styled.div`\n  background-color: ${props => props.theme.page.backgroundColor};\n  color: ${props => props.theme.page.textColor};\n  font-family: 'Lato-Light', 'Arial', 'Helvetica', sans-serif;\n  text-align: justify;\n`;\n\nconst App = () => {\n  const theme = useTheme();\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    new Promise(function(resolve) {\n      setTimeout(function() {\n        resolve();\n      }, 0);\n    }).then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <ThemeProvider theme={theme.mode}>\n      <StyledDiv id=\"app\">\n        <Header\n          data={{\n            name: profile.name,\n            headline: profile.headline,\n            contacts: profile.contacts,\n          }}\n        />\n        <Container className=\"col-xs-12 col-sm-12 col-md-9 col-lg-8 col-xl-7\">\n          <Row>\n            <Col>\n              <Summary data={profile.summary} />\n              <Skills data={profile.skills} />\n              <WorkExperience data={profile.workExperience} />\n              <Education data={profile.education} />\n              <Certifications data={profile.certifications} />\n              <Languages data={profile.languages} />\n              <LinkedinBadge profileName={profile.linkedinProfileName} />\n            </Col>\n          </Row>\n        </Container>\n        <Footer />\n      </StyledDiv>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Dictionary } from '../types/Dictionary';\n\nimport en from '../i18n/en.json';\n\nconst messages = { en };\n\nexport function getMessages(locale: 'en'): Dictionary<string> {\n  return Object.assign({}, messages[locale]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport acceptLanguage from 'accept-language';\nimport { IntlProvider } from 'react-intl';\nimport { getMessages } from './utils/getMessages';\nimport { ThemeManager } from './ThemeManager';\n\nacceptLanguage.languages(['en']);\n\nconst locale = 'en';\nconst messages = getMessages(locale);\n\nReactDOM.render(\n  <ThemeManager>\n    <IntlProvider locale={locale} messages={messages}>\n      <App />\n    </IntlProvider>\n  </ThemeManager>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}